# -*- coding: utf-8 -*-
"""EV_Data_Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rleu2SDvW9qid-4xrUBpQePPBk92egdF

## Exploratory Data Analysis On Electric Vehicle Population

![](https://i.imgur.com/UD4zG1r.jpg)

## What is Exploratory Data Analysis?
- Exploratory Data Analysis (EDA) is the process of analyzing a dataset in order to understand its main characteristics, patterns and identify anomalies. EDA is often the first step in the data analysis process.

- It involves using different graphs and plots to help visualise the data and also uses statistical methods to draw inferences from the data.

- The goal of EDA is not to arrive at a certain right answer or to confirm a pre-defined hypothesis. It is an exploratory process to draw inferences and get ideas on how the data can be further utilised to predict certain outcomes/develop ML models

## Introduction to the Electric Vehicles

- An electric vehicle (EV) is a vehicle that uses one or more electric motors for propulsion. It can be powered by a collector system, with electricity from extravehicular sources, or it can be powered autonomously by a battery (sometimes charged by solar panels, or by converting fuel to electricity using fuel cells or a generator).

- EVs include, but are not limited to, road and rail vehicles, surface and underwater vessels, electric aircraft , and electric spacecraft.
- For road vehicles, together with other emerging automotive technologies such as autonomous driving, connected vehicles, and shared mobility, EVs form a future mobility vision called Connected, Autonomous, Shared, and Electric (CASE) Mobility.
- EVs first came into existence in the late 19th century, when electricity was among the preferred methods for motor vehicle propulsion, providing a level of comfort and ease of operation that could not be achieved by the gasoline cars of the time.
- Internal combustion engines were the dominant propulsion method for cars and trucks for about 100 years, but electric power remained commonplace in other vehicle types, such as trains and smaller vehicles of all types.

We will be downloading the electric vehicle and population data set from https://www.kaggle.com/
## About Dataset
This dataset shows the Battery Electric Vehicles (BEVs) and Plug-in Hybrid Electric Vehicles (PHEVs) that are currently registered through the Washington State Department of Licensing (DOL).

1.A Battery Electric Vehicle (BEV) is an all-electric vehicle using one or more batteries to store the electrical energy that powers the motor and is charged by plugging the vehicle into an electric power source.

2 Alternative Fuel Vehicle (CAFV) Eligibility is based on the fuel requirement and electric-only range requirement as outlined in RCW 82.08.809 and RCW 82.12.809 to be eligible for Alternative Fuel Vehicles retail sales and Washington State use tax exemptions.

3.Monthly count of vehicles for a county may change from this report and prior reports. Processes were implemented to more accurately assign county at the time of registration.

4.Electric Range is no longer maintained for Battery Electric Vehicles (BEV) because new BEVs have an electric range of 30 miles or more. Zero (0) will be entered where the electric range has not been researched.

5.Field 'Electric Utility' was added starting with the publication in March 2022.

6.Field '2020 Census Tract' was added starting with the publication in June 2022.

### PROJECT OUTINE

The steps involved in the process of Exploratory Data Analysis are.,

- Import the required libraries and its dependencies.

- Download the dataset.

- Data preparation and cleaning it.

- Exploratory Analysis.

- Ask and solve questions from the data.

- Pictorial representation of data using visualization techniques.

## Installing Packages and Importing Libraries
"""

import plotly.io as pio
pio.renderers.default = "colab"

!pip install opendatasets jovian --quiet --upgrade

# Commented out IPython magic to ensure Python compatibility.
import opendatasets as od
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import jovian

# %matplotlib inline

"""## Steps in Exploratory Data Analysis
* Select the real-world data set from Kaggle/any other source.
* Download the dataset and convert it into a Pandas DataFrame.
* Perform data cleaning/deal with missing values using Pandas and NumPy.
* Plot interactive graphs to understand the data using visual libraries like Plotly.
* Ask and Answer interesting questions from the dataset.
* Summarize your key inferences and state the conclusion.
* Elaborate on ideas for future work and quote references.
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Step 1: Download the dataset"""

!pip install opendatasets --upgrade --quiet

data_filename ='/content/drive/MyDrive/EV Data Analysis/Electric_Vehicle_Population_Data.csv'

df = pd.read_csv(data_filename)

df

"""data is loaded

## Step 2: Perform data preparation & cleaning
"""

len(df.columns)

df.shape

df.head(5)

"""## Step 3
## (i)Exploratory Analysis
After the preparing the data, analyze it with the help of NumPy and Pandas. Use describe() to get the count, mean value, standard deviation, minimum and maximum values, display quartiles.

## Unique values of all the columns in the data set
"""

cols = df.columns
def Unique_Values():
    for i in np.arange(0,len(cols)):
        print('There are {} nos of unique values in {} column out of {}'.format(df[cols[i]].nunique(), cols[i], len(df)))
Unique_Values()

df.info()

df.columns

# To view Corrlation
df.corr(numeric_only=True).style.background_gradient(cmap='cividis')

"""Postal Code and DOL Vehicle ID is a unique identifier for each vehicle. Therefore, we will remove the duplicate  IDs from the dataset using drop_duplicates method of Pandas:"""

df['Postal Code'].value_counts().value_counts()

df['DOL Vehicle ID'].value_counts().value_counts()

# to view the statistical values of numerical columns
df.describe().style.background_gradient(cmap='cividis')

df.columns.unique()

"""### Handling the missing values"""

df.isna().sum()

# to view the missing percentages
missing_percentges=df.isna().sum().sort_values(ascending=False)/len(df)
missing_percentges

type(missing_percentges)

missing_percentges[missing_percentges !=1]

"""### to plot the missing percentage of the columns in the data set"""

#to plot the missing percentage of the columns in the data set
missing_percentges[missing_percentges !=1].plot(kind='barh')

"""- Electric Utility column has the more missing values

visualize the missing data in percentages using basic numerical equation
"""

data_missing = df.isnull().sum()*100/len(df)

plt.figure(figsize=(8,6))
sns.heatmap(df.isnull(),yticklabels=False,cmap='viridis')

"""Using the `drop` method in Pandas, we can remove all the rows with missing values"""

# Drop rows where model is 0 or Null
df.drop(df[(df['Model'].isna()) | (df['Model']==0.0)].index, inplace = True)

#Drop the rows where postal code is 0 or null
df.drop(df[df['Postal Code'].isna()].index, inplace = True)

"""Now check the datatypes of all columns using the info() method:"""

df.info()

"""In order to standardise the data formats of different columns, we will do the following:
* Change 'Postal Code' datatype to 'Int'
* Change 'Model' datatype to 'Bool' as it holds True/False values
* Convert 'Model Year' column to datetime format
"""

df['Postal Code'] = df['Postal Code'].astype(int)
df['Model'] = df['Model'].astype(bool)
df['Model Year'] = pd.to_datetime(df['Model Year'], errors = 'coerce')

df.isna().sum()

# Drop all the rows which does not have the Postal Code

df.dropna(subset = ['Postal Code'], inplace = True)

#Final Check on Missing Values

df.isna().sum()

df.iloc[:,0]

""".iloc is used to pick out specific column from the dataframe.

## (ii) visualization
## **City**
"""

City_df = pd.DataFrame(df.City[:20].value_counts().sort_index())
City_df

cities_by_Electric_Range=df.City.value_counts()
cities_by_Electric_Range

cities_by_Electric_Range[:20]

"""## To plot the cities by the Electric Range upto range 20."""

# To plot the cities by the Electric Range upto range 20
cities_by_Electric_Range[:20].plot(kind='pie')

"""- From the above pie chart Seattle City  has the more Electric Range

## to plot the cities by Electric Range Using log scale
"""

sns.set_style('darkgrid')

# to plot the cities by Electric Range Using log scale
sns.histplot(cities_by_Electric_Range,log_scale=True)

"""- Electric Range per cities decreases exponentially"""

cities_by_Electric_Range[cities_by_Electric_Range==1]

"""- over 206 cities have the Electric range upto 1 only

## **2.Model**
"""

# to view the top models
top_Model=df.Model.value_counts()
top_Model[:10]

max_Model=df.groupby('City')['Model Year'].max().sort_values(ascending=False)
max_Model.head(10).index

#  ploting the top models
plt.figure(figsize=(8,6))
plt.xticks(rotation=75)
plt.xlabel( "City name")
plt.ylabel( "Models" )
plt.title( "Top 10 highest maximum Models" )

# Different color for each bar
sns.barplot(
    y=df.Model.head(10),
    x=df.Model.head(10).index,
    palette="tab10"   # you can try "tab10", "Set2", "coolwarm", etc.
)

plt.show()

"""- from the above barplot we come to know MODEL S in the top Model in the

cities

##  we can plot TESLA in maximum cities
"""

max_Model_TESLA=df.groupby('City')['Model Year'].max().sort_values(ascending=False)
max_Model_TESLA.head(10).index

plt.figure(figsize=(10,6))
plt.xticks(rotation=75)
plt.xlabel("City")
plt.ylabel("TESLA")
plt.title("Top 10 Highest Maximum TESLA Cities")

# Different color for each bar
sns.barplot(
    y=max_Model_TESLA.head(10),
    x=max_Model_TESLA.head(10).index,
    palette="viridis"   # you can try "tab10", "Set2", "coolwarm", etc.
)

plt.show()

"""## TESLA in minimum cities"""

min_Model_TESLA=df.groupby('City')['Model Year'].min().sort_values(ascending=True)
min_Model_TESLA.head(10).index

plt.figure(figsize=(8,6))
plt.xticks(rotation=75)
plt.xlabel( "City Name")
plt.ylabel( "minimum TESALA Cities" )
plt.title( "Top 10 lowest minimum TESLA cities" )

# Different color for each bar
sns.barplot(
    y=min_Model_TESLA.head(10),
    x=min_Model_TESLA.head(10).index,
    palette="Set2"   # you can try "tab10", "Set2", "coolwarm", etc.
)

plt.show()

"""- The top 10 lowest minimum TESLA cities are 'Marysville', 'Sequim', 'Deming', 'Mount Vernon', 'Graham', 'Seattle', 'Everson', 'Shoreline', 'Edmonds', 'Friday Harbor'

## **3.Make**
"""

# ploting the top makes using histogram
fig = px.histogram(df,
                   x='Make',
                    marginal='box',
                   color_discrete_sequence=['Green'],
                   title='top makes')

fig.update_layout(bargap=0.3)
fig.show()

"""- TESLA is top make in all make with the count 65.116k and after NISSAN is the second one with the count 12.938k.
- TOYOTA has the upper fence.

## **4.Base MSRP**
"""

# Base MSRP distribution
Base_MSRP = df.sample(n = 10000)

Base_MSRP

# to plot the Base MSRP using histogram
fig = px.histogram(df, x="Base MSRP",
                   title='Base MSRP DISTRIBUTION',
                   labels={'Base_MSRP':'Base MSRP'}, # can specify one label per df column
                   opacity=0.8,
                   log_y=True, # represent bars with log scale
                   color_discrete_sequence=['indianred'] # color of histogram bars
                   )
fig.show()

"""## **5.Electric Utility**"""

# to view the Electric Utility
Electric_Utility = df.sample(n = 10000)

Electric_Utility

# Set axis & legend labels
fig = px.histogram(df, x="Electric Utility",height=1500,width=1500,
                   title='Electric Utility DISTRIBUTION',
                   labels={'Electric_Utility':'Electric Utility'}, # can specify one label per df column
                   opacity=0.8,
                   color_discrete_sequence=['indianred'] # color of histogram bars
                   )
fig.show()

"""- PUGET SOUND ENERGY INC// CITY OF TACOMA-(WA) have the more Electric Utility with the count 56.932k

## **6.VIN**
"""

import matplotlib

sample_df=df.sample(500)

# to plot the VIN number using scatter plot
fig=px.scatter(sample_df,x='VIN (1-10)',y='Legislative District', color='Electric Vehicle Type',hover_name="Electric Vehicle Type")
fig.update_layout(
    title="VIN NUMBER WITH THE Legislative District",
    xaxis_title="VIN (1-10)",
    yaxis_title="Legislative District",
    #legend_title="",
    #plot_bgcolor='#ffcc9c',
    font=dict(
        family="Arial",
        size=14,
        color="#cc3e0e"
    )
)
fig

"""- From the above visualization Battery Electric Vehicle (BEV) are more with the VIN numbers in different legislative District.

## **No of EV per County**
"""

County_counts = pd.DataFrame(df.County.value_counts().reset_index())

County_counts.columns = ["County","counts"]

County_counts

plt.figure(figsize=(16,8))
plt.title("NUMBER OF  electric vehicles  PER county", fontsize= 15)
sns.barplot(x = County_counts.County[:20], y = County_counts.counts, data = County_counts);

"""- King has the more no of Electric Vehicles and Harbor has the low Electric vehicles

## **Electric Range per Clean Alternative Fuel Vehicle (CAFV) Eligibility**
"""

# To view the Electric Range per CAFV Eligibility
sns.histplot(data=df, x="Electric Range", hue="Clean Alternative Fuel Vehicle (CAFV) Eligibility", multiple="stack")

"""It is noted that for electric ranges greater than 50 are eligible vehicles with clean fuel. The uncertainty lies in those ranges below 50 as they are either not eligible or there is no clear information on them.

## **Vehicle Location**
"""

import folium

for x in df.sample(100):
  print(x)

df['lat'] = df['Vehicle Location'].str.split(' ').str[1].str.split('(').str[1].astype(float)
df['lon'] = df['Vehicle Location'].str.split(' ').str[2].str.split(')').str[0].astype(float)
df['lat'] = df['lat'].fillna(0)
df['lon'] = df['lon'].fillna(0)

import folium

for x in df.sample(10).items():
    print(x)

zip(list(df.lat),list(df.lon))

df = df[df['Vehicle Location']=='POINT (-120.56916 46.58514)']

# To view the Vehicle Location  on the map
f = folium.Figure(width=800, height=700)
r = folium.Map(location=[46.58514, -120.56916], zoom_start=11).add_to(f)
for i in df.index[:20]:
  folium.Marker(location=[df['lat'][i],df['lon'][i]],
                tooltip=[df['Postal Code'][i], df['Postal Code'][i]],
                popup = df['Vehicle Location'][i], icon=folium.Icon(color="red")).add_to(r)
r

"""- Vehicle location according to the postal code

# **Ask & answer questions **

## **1. What is the Distances Travel by vehicle make per electric charge?**

Plot showing Distances Travel by vehicle make per electric charge
"""

!pip install plotly --upgrade

import plotly.express as ps
km_range = pd.DataFrame(df.groupby('Make')['Electric Range'].mean().reset_index()).sort_values(by='Electric Range',ascending=False).reset_index(drop=True).head(10)
km_range.columns = ['model','km_range']
ps.pie(data_frame=km_range, names='model', values='km_range', hover_name='km_range',title='Top 10 Model with KM range',hole=True)

"""- Now here is an interesting insight. JAGUAR being the market leader is far behind when it comes to distance travelled by its vehicles per charge

## **2.What is the Year Wise Cars sales growth?**
"""

year_wise_cars = df.groupby('Model Year')['VIN (1-10)'].count().reset_index()
year_wise_cars.columns = ['year','num_cars']

fig = ps.line(year_wise_cars,x="year", y="num_cars", title='Year Wise Number of Cars',markers=True)
fig.show()

"""Plot showing Year Wise Cars sales growth of EVs"""

year_wise_cars.sort_values(by='num_cars', ascending=False).head(10)

"""-  We can see the market trust in electric vehicles started to built up after 2019. The demand of electric vehicles is ever since going high.

## **3.What are the Top 10 count of cars per Country?**
"""

# To view the Top 10 count of cars per Country
import matplotlib.pyplot as plt
car_counts = df['County'].value_counts().nlargest(10)
car_counts.plot(kind='bar')
plt.xlabel('County')
plt.ylabel('Number of Cars')
plt.title('Top 10 County of Cars per County')
plt.show()

car_counts_df = car_counts.to_frame()
car_counts_df.style.background_gradient(cmap='Blues')

"""- King county with 79K cars stands at the top

## **4.What is the Top 10 count of cars per city?**
"""

car_counts_Cty = df['City'].value_counts().nlargest(10)
import matplotlib.pyplot as plt
# plot the counts
car_counts_Cty.plot(kind='bar')
plt.xlabel('City')
plt.ylabel('Number of Cars')
plt.title('Top 10 Count of Cars per City')
plt.show()


car_counts_cty_df = car_counts_Cty.to_frame()
car_counts_cty_df.style.background_gradient(cmap='Blues')

"""- Plot showing top-10 Top 10 count of cars per city

- Seattle stood at the top,. Due to high number of tech giants and their employee living there

## **5.What is the Top 10 count of cars per postal code?**
"""

# To View the Top 10 count of cars per postal code
car_counts_pc = df['Postal Code'].value_counts().nlargest(10)
# plot the counts with a logarithmic y-axis
plt.bar(car_counts_pc.index, car_counts_pc.values)
#plt.yscale('log')
plt.xlabel('Postal Code')
plt.ylabel('Number of Cars')
plt.title('Top 10 Count of Cars per Postal Code')
plt.show()

car_counts_pc_df = car_counts_pc.to_frame()
car_counts_pc_df.style.background_gradient(cmap='Blues')

"""-  This provide us more insight for other marketing purposes and upselling opportunities

## **6.What are the Top 10 count of cars per state?**
"""

car_counts_St = df['State'].value_counts().nlargest(10)

# plot the counts with a logarithmic y-axis
plt.bar(car_counts_St.index, car_counts_St.values)
plt.yscale('log')
plt.xlabel('State')
plt.ylabel('Number of Cars (log scale)')
plt.title('Top 10 Count of Cars per State')
plt.show()

car_counts_St_df = car_counts_St.to_frame()
car_counts_St_df.style.background_gradient(cmap='Blues')

"""- Plot showing Top 10 count of cars per state

-  Washington as a state has the heighest number of cars

## **7.What is the EVT Distribution count per state?**
"""

# To view the  EVT Distribution count per state
evt_Dis_cnt = df.groupby(['State', 'Electric Vehicle Type']).size().reset_index(name='Count')
evt_Dis_cnt.groupby(['State', 'Electric Vehicle Type'])['Count'].count().unstack().plot(kind='bar', stacked=True)
plt.legend(bbox_to_anchor=(1.01, 1), loc='upper left')

plt.show()

"""-  Very useful insights from amrketing POV., there is a high potential of BEV's makers to promote BEVs in states like AK & AL., On the other side Arizona has a big market waiting for PHEV vehicles"""

evt_Dis_cnt.head(10).sort_values(by='Count', ascending=False)

"""## **8.In which Year Electric Vehicles increased?**"""

import seaborn as sns
import matplotlib.pyplot as plt   # also needed for plt.show()

# Histogram of EVs by Model Year
sns.histplot(data=df, x="Model Year", bins=20, color="skyblue")

plt.title("Electric Vehicle Adoption by Year")
plt.xlabel("Model Year")
plt.ylabel("Number of Vehicles")
plt.show()

"""After 2020 Electric Vehicles are increased . In the 2010 Vehicles are very low

## **9. What are the Top 5 vs Bottom 5 Comparison?**
"""

# To view the top 5 vs bottom 5 cars comparision
car_market_share = pd.DataFrame(df.groupby('Make')['VIN (1-10)'].count().reset_index()).sort_values(by='VIN (1-10)',ascending=False).reset_index(drop=True)
car_market_share.columns = ['model','count']
car_market_share_top_5 = car_market_share.head(5)
car_market_share_bottom_5 = car_market_share.tail(5)

fig, axes = plt.subplots(1, 2, figsize=(20, 5))
sns.barplot(data=car_market_share_top_5, x="model", y="count",ax=axes[0],palette="tab10")
sns.barplot(data=car_market_share_bottom_5, x="model", y="count",ax=axes[1],palette="tab10")
axes[0].set_title('Top 5 Cars')
axes[1].set_title('Bottom 5 Cars')

"""- TESLA is the market leader by large.
- Top 5 cars are  TESLA,NISSAN,CHEVROLET model,FORD,BMW.
- Bottom  cars are  FISKER,AZURE DYNAMICS,THINK model,BENTLEY,WHEEGO ELECTRIC CARS

# **Summary**
Here is a brief summary of the process I followed for the Exploratory Data Analysis of Electric Vehicle and Population Data.

1. I have downloaded the data using `opendatasets` library from Kaggle.
2. I have performed below actions on the Data.
*    Load the file using pandas.
*    Look at some information about the file.
*    Fix any missing or incorrect values.
3. I have analysed below columns to get meangingful insights out of it.
*    City
*    Model(TESLA in maximum cities and minimum cities)
*    Make
*    Base MSRP
*    Electric Utility
*    VIN
*   No of EV per County
*   Electric Range per Clean Alternative Fuel Vehicle (CAFV) Eligibility
*   Vehicle Location
*   Relation Between Electric Range And Base MSRP
4. I have answered below questions to generate insights from the dataset.
*   What is the Distances Travel by vehicle make per electric charge?
*   What is the Year Wise Cars sales growth?
*   What are the Top 10 count of cars per Country?
*   What is the Top 10 count of cars per city?
*   What is the Top 10 count of cars per postal code?
*   What are the Top 10 count of cars per state?
*   What is the EVT Distribution count per state?
*   In which Year Electric Vehicles increased?
*   What are the Top 5 vs Bottom 5 Comparison?

- The Electric Vehicle Population dataset contains information on Battery Electric Vehicles (BEVs) and Plug-in Hybrid Electric Vehicles (PHEVs) registered through Washington State Department of Licensing (DOL).

- The top 10 counts of cars per county, city, state, and postal code were determined.

- Washington had the most cars registered by state, followed by California and Virginia.

# **Conclusion**

- Seattle is the top  city in top 10 with electric Cars.

- King County is the top in top 10 county with more electric Vehicles

- 98052 postal code contains the high electric cars.

- JAGUR have the more electric range comapre to other makes.

- From 2008 to 2022 the no of electric vehicles are increased.

- PUGET SOUND ENERGY INC// CITY OF TACOMA-(WA) have the more Electric Utility with the count 358.

- Tesla is the most popular electric car make in Washington state, followed by Nissan, Chevrolet, and Toyota.
- Tesla is also the most popular make in Seattle, followed by Nissan, Chevrolet, and BMW.

- Washington state has the highest number of Audi, BMW, and Chevrolet electric cars registered among all states.

# **Future Work**

- Not only TESLA All the makes have to make the Electric Vehicles in Future.

- All models are made the Electric Vehicles.

- Not only Washington state all over world should use the Electric Vehicles.

- Coming Years Electric Vehicle Usage Should be increased.

- TOYOTA and VOLKSWAGEN  companies have only few electric vehicles need to increase.

# **References:**

Here are the few references which I found useful during my study. Here are the few references which I found useful during my study.

https://youtu.be/kLDTbavcmd0

https://www.geeksforgeeks.org/data-visualization-different-charts-python/

https://www.digitalvidya.com/blog/python-visualization/

https://www.simplilearn.com/tutorials/python-tutorial/
data-visualization-in-python

https://www.geeksforgeeks.org/python-plotting-google-map-using-folium-package/
"""
